name: Build and Release Tunnel

on:
  push:
    branches: [ "main" ]
    tags:
      - 'PABv*'
      - 'PBBv*'
      - 'RBv*'
  pull_request:
    branches: [ "main" ]

# 添加权限配置
permissions:
  contents: write
  packages: read
  actions: read
  checks: read

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Update Scripts from BEITAware/TunnelScripts
      run: |
        git clone --depth 1 https://github.com/BEITAware/TunnelScripts.git temp-scripts
        Remove-Item -Recurse -Force -Path "InstallationWizard\Scripts" -ErrorAction SilentlyContinue
        New-Item -ItemType Directory -Path "InstallationWizard\Scripts"
        Copy-Item -Path "temp-scripts\*" -Destination "InstallationWizard\Scripts" -Recurse -Force
        Remove-Item -Recurse -Force -Path "temp-scripts"
        echo "Scripts updated successfully."

    - name: Get version numbers from tag
      id: version
      run: |
        # Default values for non-tag pushes
        $technicalVersion = "1.0.$env:GITHUB_RUN_NUMBER.0"
        $displayVersion = "Dev-Build-$env:GITHUB_RUN_NUMBER"

        # Check if the ref is a tag matching the custom format, e.g., PABv123
        if ($env:GITHUB_REF -match "refs/tags/((PAB|PBB|RB)v(\d)(\d)(\d))") {
          $displayVersion = $matches[1]   # e.g., PABv123
          $major = $matches[3]          # e.g., 1
          $minor = $matches[4]          # e.g., 2
          $patch = $matches[5]          # e.g., 3
          
          $technicalVersion = "$major.$minor.$patch.0"
        }

        echo "TECHNICAL_VERSION=$technicalVersion" >> $env:GITHUB_OUTPUT
        echo "DISPLAY_VERSION=$displayVersion" >> $env:GITHUB_OUTPUT
        echo "Technical Version: $technicalVersion"
        echo "Display Version: $displayVersion"

    - name: Restore main program dependencies
      run: dotnet restore Tunnel-Next\Tunnel-Next.csproj

    - name: Build main program (non-single file, ReadyToRun)
      run: |
        dotnet publish Tunnel-Next\Tunnel-Next.csproj `
          --configuration Release `
          --output .\MainProgram `
          --runtime win-x64 `
          --self-contained true `
          -p:PublishReadyToRun=true `
          -p:PublishSingleFile=false `
          -p:AssemblyVersion=${{ steps.version.outputs.TECHNICAL_VERSION }} `
          -p:FileVersion=${{ steps.version.outputs.TECHNICAL_VERSION }} `
          -p:InformationalVersion=${{ steps.version.outputs.DISPLAY_VERSION }}

    - name: Prepare App folder for installation wizard
      run: |
        if (!(Test-Path "InstallationWizard\App")) {
          New-Item -ItemType Directory -Path "InstallationWizard\App" -Force
        }
        Remove-Item "InstallationWizard\App\*" -Recurse -Force -ErrorAction SilentlyContinue
        Copy-Item "MainProgram\*" -Destination "InstallationWizard\App" -Recurse -Force
        echo "App folder prepared with main program files"

    - name: Update installation wizard version
      run: |
        $csprojPath = "InstallationWizard\InstallationWizard.csproj"
        $content = Get-Content $csprojPath -Raw
        $content = $content -replace '<AssemblyVersion>.*</AssemblyVersion>', "<AssemblyVersion>${{ steps.version.outputs.TECHNICAL_VERSION }}</AssemblyVersion>"
        $content = $content -replace '<FileVersion>.*</FileVersion>', "<FileVersion>${{ steps.version.outputs.TECHNICAL_VERSION }}</FileVersion>"
        $content = $content -replace '<InformationalVersion>.*</InformationalVersion>', "<InformationalVersion>${{ steps.version.outputs.DISPLAY_VERSION }}</InformationalVersion>"
        Set-Content $csprojPath $content

    - name: Restore installation wizard dependencies
      run: dotnet restore InstallationWizard\InstallationWizard.csproj

    - name: Build installation wizard (single file, ReadyToRun)
      run: |
        dotnet publish InstallationWizard\InstallationWizard.csproj `
          --configuration Release `
          --output .\InstallationWizardOutput `
          --runtime win-x64 `
          --self-contained true `
          -p:PublishReadyToRun=true `
          -p:PublishSingleFile=true `
          -p:AssemblyVersion=${{ steps.version.outputs.TECHNICAL_VERSION }} `
          -p:FileVersion=${{ steps.version.outputs.TECHNICAL_VERSION }} `
          -p:InformationalVersion=${{ steps.version.outputs.DISPLAY_VERSION }}

    # 将 App 文件夹复制到安装向导输出目录，确保包含主程序
    - name: Copy App folder to installer output
      run: |
        if (Test-Path "InstallationWizard\App") {
          Copy-Item "InstallationWizard\App" -Destination "InstallationWizardOutput\App" -Recurse -Force
          echo "App folder copied to installer output"
        } else {
          echo "InstallationWizard\\App 文件夹不存在，无法复制"
        }

    - name: Package installation wizard
      id: package
      run: |
        $zipFileName = "Tunnel安装向导-${{ steps.version.outputs.DISPLAY_VERSION }}.zip"
        Compress-Archive -Path "InstallationWizardOutput\*" -DestinationPath $zipFileName
        echo "ZIP_FILE_NAME=$zipFileName" >> $env:GITHUB_OUTPUT

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: tunnel-build-${{ steps.version.outputs.DISPLAY_VERSION }}
        path: |
          ${{ steps.package.outputs.ZIP_FILE_NAME }}
          MainProgram/

    - name: Create Release (on tag push)
      id: create_release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Tunnel ${{ steps.version.outputs.DISPLAY_VERSION }}
        draft: false
        prerelease: true
        body: |
          ## Tunnel ${{ steps.version.outputs.DISPLAY_VERSION }}

          ### Installation
          Download and unzip `${{ steps.package.outputs.ZIP_FILE_NAME }}`, then run the installer.

          ### Changes
          - Automated build with ReadyToRun optimization.
          - Updated scripts from BEITAware/TunnelScripts.
          - Main program: Non-single file for better performance.
          - Installation wizard: Single file for easy distribution.

    - name: Upload Release Asset (on tag push)
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.package.outputs.ZIP_FILE_NAME }}
        asset_name: ${{ steps.package.outputs.ZIP_FILE_NAME }}
        asset_content_type: application/zip
