name: Build and Release Tunnel

on:
  push:
    branches: [ "main" ]
    tags:
      - "PABv*"
      - "PBBv*"
      - "RBv*"
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Update Scripts from BEITAware/TunnelScripts
      run: |
        git clone --depth 1 https://github.com/BEITAware/TunnelScripts.git temp-scripts
        Remove-Item -Recurse -Force -Path "InstallationWizard\Scripts" -ErrorAction SilentlyContinue
        New-Item -ItemType Directory -Path "InstallationWizard\Scripts"
        Copy-Item -Path "temp-scripts\*" -Destination "InstallationWizard\Scripts" -Recurse -Force
        Remove-Item -Recurse -Force -Path "temp-scripts"
        echo "Scripts updated successfully."

    - name: Get version number
      id: version
      run: |
        if ($env:GITHUB_REF -match "refs/tags/v(.+)") {
          $version = $matches[1]
        } else {
          $version = "1.0.$env:GITHUB_RUN_NUMBER"
        }
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        echo "Version: $version"

    - name: Restore main program dependencies
      run: dotnet restore Tunnel-Next\Tunnel-Next.csproj

    - name: Build main program (non-single file, ReadyToRun)
      run: |
        dotnet publish Tunnel-Next\Tunnel-Next.csproj `
          --configuration Release `
          --output .\MainProgram `
          --runtime win-x64 `
          --self-contained true `
          -p:PublishReadyToRun=true `
          -p:PublishSingleFile=false `
          -p:AssemblyVersion=${{ steps.version.outputs.VERSION }} `
          -p:FileVersion=${{ steps.version.outputs.VERSION }}

    - name: Prepare App folder for installation wizard
      run: |
        # Create App folder in InstallationWizard if it doesn't exist
        if (!(Test-Path "InstallationWizard\App")) {
          New-Item -ItemType Directory -Path "InstallationWizard\App" -Force
        }
        # Clear existing App folder contents
        Remove-Item "InstallationWizard\App\*" -Recurse -Force -ErrorAction SilentlyContinue
        # Copy compiled main program to App folder
        Copy-Item "MainProgram\*" -Destination "InstallationWizard\App" -Recurse -Force
        echo "App folder prepared with main program files"

    - name: Update installation wizard version
      run: |
        $csprojPath = "InstallationWizard\InstallationWizard.csproj"
        $content = Get-Content $csprojPath -Raw
        $content = $content -replace '<AssemblyVersion>.*</AssemblyVersion>', "<AssemblyVersion>${{ steps.version.outputs.VERSION }}</AssemblyVersion>"
        $content = $content -replace '<FileVersion>.*</FileVersion>', "<FileVersion>${{ steps.version.outputs.VERSION }}</FileVersion>"
        Set-Content $csprojPath $content

    - name: Restore installation wizard dependencies
      run: dotnet restore InstallationWizard\InstallationWizard.csproj

    - name: Build installation wizard (single file, ReadyToRun)
      run: |
        dotnet publish InstallationWizard\InstallationWizard.csproj `
          --configuration Release `
          --output .\InstallationWizardOutput `
          --runtime win-x64 `
          --self-contained true `
          -p:PublishReadyToRun=true `
          -p:PublishSingleFile=true `
          -p:AssemblyVersion=${{ steps.version.outputs.VERSION }} `
          -p:FileVersion=${{ steps.version.outputs.VERSION }}

    - name: Package installation wizard
      id: package
      run: |
        $zipFileName = "Tunnel安装向导-预览测试版-${{ steps.version.outputs.VERSION }}.zip"
        Compress-Archive -Path "InstallationWizardOutput\*" -DestinationPath $zipFileName
        echo "ZIP_FILE_NAME=$zipFileName" >> $env:GITHUB_OUTPUT

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: tunnel-build-${{ steps.version.outputs.VERSION }}
        path: |
          ${{ steps.package.outputs.ZIP_FILE_NAME }}
          MainProgram/

    - name: Create Release (on tag push)
      id: create_release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Tunnel v${{ steps.version.outputs.VERSION }}
        draft: false
        prerelease: true
        body: |
          ## Tunnel v${{ steps.version.outputs.VERSION }} (预览测试版)

          ### Installation
          Download and unzip `Tunnel安装向导-预览测试版-${{ steps.version.outputs.VERSION }}.zip`, then run the installer.

          ### Changes
          - Automated build with ReadyToRun optimization.
          - Updated scripts from BEITAware/TunnelScripts.
          - Main program: Non-single file for better performance.
          - Installation wizard: Single file for easy distribution.

    - name: Upload Release Asset (on tag push)
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.package.outputs.ZIP_FILE_NAME }}
        asset_name: ${{ steps.package.outputs.ZIP_FILE_NAME }}
        asset_content_type: application/zip
